@model IEnumerable<MyRole>
@{
    ViewData["Title"] = "Index";
}

<h1 class="text-center mt-3  pb-3">Roles</h1>


<p class="pb-3">
    <a class="btn btn-outline-primary" asp-action="Create">Create New</a>
</p>

<div class="table-responsive">
    <table id="tableId" class="table pb-3 text-center table-hover  align-middle">
        <thead class="table-dark">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NormalizedName)
                </th>
                @if (User.IsInRole("Admin"))
                {
                    <th>Edit</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.NormalizedName)
                    </td>
                    @if (User.IsInRole("Admin"))
                    {
                        <td>
                            <a class="btn btn-outline-primary" asp-action="Edit" asp-route-id="@item.EncryptedId">Edit</a>
                        </td>
                    }

                </tr>
            }
        </tbody>
    </table>
</div>



<div id="pagination" class="d-flex justify-content-center mt-3"></div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const table = document.querySelector("table tbody");
        const rows = table.querySelectorAll("tr");
        const rowsPerPage = 5; // 👈 عدد الصفوف في كل صفحة
        const totalPages = Math.ceil(rows.length / rowsPerPage);
        let currentPage = 1;

        function showPage(page) {
            currentPage = page;
            const start = (page - 1) * rowsPerPage;
            const end = start + rowsPerPage;

            rows.forEach((row, index) => {
                row.style.display = (index >= start && index < end) ? "" : "none";
            });

            renderPagination();
        }

        function renderPagination() {
            const pagination = document.getElementById("pagination");
            pagination.innerHTML = "";

            // زر Previous
            if (currentPage > 1) {
                const prev = document.createElement("button");
                prev.innerText = "Previous";
                prev.className = "btn btn-outline-primary mx-1";
                prev.onclick = () => showPage(currentPage - 1);
                pagination.appendChild(prev);
            }

            // الأرقام
            for (let i = 1; i <= totalPages; i++) {
                const btn = document.createElement("button");
                btn.innerText = i;
                btn.className = "btn mx-1 " + (i === currentPage ? "btn-primary" : "btn-outline-primary");
                btn.onclick = () => showPage(i);
                pagination.appendChild(btn);
            }

            // زر Next
            if (currentPage < totalPages) {
                const next = document.createElement("button");
                next.innerText = "Next";
                next.className = "btn btn-outline-primary mx-1";
                next.onclick = () => showPage(currentPage + 1);
                pagination.appendChild(next);
            }
        }

        // أول صفحة
        showPage(1);
    });
</script>
